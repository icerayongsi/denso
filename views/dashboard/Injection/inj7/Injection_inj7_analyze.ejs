<%- include('../Injection_partials/Injection_header') -%>

  <%- include('../../../partials/navbar_dashboard') -%>

    <%- include('../Injection_partials/Injection_menu') -%>

      </div>
      </li>
      </ul>

      </div>
      </nav>

      <main class="col-md-9 ms-sm-auto col-lg-10 px-md-4 mt-3">



        <div class="card card-body margin-5">

          <div
            class="d-flex justify-content-between flex-wrap flex-md-nowrap align-items-center pt-0 pb-2 mb-3 border-bottom">
            <h3 class="text-uppercase" style="font-weight: 700;">Injection <%= inj %> / Statistic <%= page %>
            </h3>

          </div>


          <!-- MAIN -->

          <!-- Button trigger modal -->
          <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
            Datetime picker
          </button>


          <!-- Modal -->
          <form method="GET" id="q-data">
            <div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1"
              aria-labelledby="staticBackdropLabel" aria-hidden="true">
              <div class="modal-dialog modal-dialog-centered">
                <div class="modal-content">
                  <div class="modal-header">
                    <h1 class="modal-title fs-5" id="staticBackdropLabel">Datetime picker</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                  </div>
                  <div class="modal-body">

                    <div class="card-body">

                      <div class="mb-3">
                        <label for="disabledTextInput" class="form-label">From : </label>

                        <div class="input-group date" id="from">
                          <input type="text" name="fromdate" class="form-control" data-date-format="YYYY-MM-DD HH:mm:ss"
                            required />
                          <span class="input-group-text" id="basic-addon2">
                            <i class="bi bi-calendar"></i>
                          </span>

                        </div>

                      </div>

                      <div class="mb-3">
                        <label for="disabledTextInput" class="form-label">To : </label>

                        <div class="input-group date" id="to">
                          <input type="text" name="todate" class="form-control" data-date-format="YYYY-MM-DD HH:mm:ss"
                            required />
                          <span class="input-group-text" id="basic-addon2">
                            <i class="bi bi-calendar"></i>
                          </span>

                        </div>

                      </div>

                    </div>

                  </div>
                  <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button class="btn btn-primary" type="submit" data-bs-dismiss="modal">Update</button>
                  </div>
                </div>
              </div>
            </div>
          </form>


          <div class="container-fluid mt-3">
            <div class="row">
              <table class="table">
                <thead>
                  <tr>
                    <th scope="col">Measure Item</th>
                    <th scope="col">Min</th>
                    <th scope="col">Max</th>
                    <th scope="col">Range</th>
                    <th scope="col">Average</th>
                    <th scope="col">Standard Deviation</th>
                  </tr>
                </thead>
                <tbody>
                  <tr>
                    <th scope="row">Cycle Time(s)</th>
                    <td id="Cycle_Time-min"></td>
                    <td id="Cycle_Time-max"></td>
                    <td id="Cycle_Time-Range"></td>
                    <td id="Cycle_Time-Average"></td>
                    <td id="Cycle_Time-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Inj. Time(s)</th>
                    <td id="Inj_Time-min"></td>
                    <td id="Inj_Time-max"></td>
                    <td id="Inj_Time-Range"></td>
                    <td id="Inj_Time-Average"></td>
                    <td id="Inj_Time-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Recovery Time(s)</th>
                    <td id="Recovery_Time-min"></td>
                    <td id="Recovery_Time-max"></td>
                    <td id="Recovery_Time-Range"></td>
                    <td id="Recovery_Time-Average"></td>
                    <td id="Recovery_Time-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Inj.start Pos(mm)</th>
                    <td id="Inj_start_Pos-min"></td>
                    <td id="Inj_start_Pos-max"></td>
                    <td id="Inj_start_Pos-Range"></td>
                    <td id="Inj_start_Pos-Average"></td>
                    <td id="Inj_start_Pos-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">H.P Trans Pos(mm)</th>
                    <td id="H_P_Trans_Pos-min"></td>
                    <td id="H_P_Trans_Pos-max"></td>
                    <td id="H_P_Trans_Pos-Range"></td>
                    <td id="H_P_Trans_Pos-Average"></td>
                    <td id="H_P_Trans_Pos-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Hold Comp Pos(mm)</th>
                    <td id="Hold_Comp_Pos-min"></td>
                    <td id="Hold_Comp_Pos-max"></td>
                    <td id="Hold_Comp_Pos-Range"></td>
                    <td id="Hold_Comp_Pos-Average"></td>
                    <td id="Hold_Comp_Pos-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Cushion(mm)</th>
                    <td id="Cushion-min"></td>
                    <td id="Cushion-max"></td>
                    <td id="Cushion-Range"></td>
                    <td id="Cushion-Average"></td>
                    <td id="Cushion-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Inj. Press(Mpa)</th>
                    <td id="Inj_Press-min"></td>
                    <td id="Inj_Press-max"></td>
                    <td id="Inj_Press-Range"></td>
                    <td id="Inj_Press-Average"></td>
                    <td id="Inj_Press-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">H.P Trans Prs(Mpa)</th>
                    <td id="H_P_Trans_Prs-min"></td>
                    <td id="H_P_Trans_Prs-max"></td>
                    <td id="H_P_Trans_Prs-Range"></td>
                    <td id="H_P_Trans_Prs-Average"></td>
                    <td id="H_P_Trans_Prs-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Back Press(Mpa)</th>
                    <td id="Back_Press-min"></td>
                    <td id="Back_Press-max"></td>
                    <td id="Back_Press-Range"></td>
                    <td id="Back_Press-Average"></td>
                    <td id="Back_Press-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Cav. Press(OP)(Mpa)</th>
                    <td id="Cav_Press_OP-min"></td>
                    <td id="Cav_Press_OP-max"></td>
                    <td id="Cav_Press_OP-Range"></td>
                    <td id="Cav_Press_OP-Average"></td>
                    <td id="Cav_Press_OP-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">LNH Temp(°C)</th>
                    <td id="LNH_Temp-min"></td>
                    <td id="LNH_Temp-max"></td>
                    <td id="LNH_Temp-Range"></td>
                    <td id="LNH_Temp-Average"></td>
                    <td id="LNH_Temp-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">NH Temp(°C)</th>
                    <td id="NH_Temp-min"></td>
                    <td id="NH_Temp-max"></td>
                    <td id="NH_Temp-Range"></td>
                    <td id="NH_Temp-Average"></td>
                    <td id="NH_Temp-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">H4 Temp(°C)</th>
                    <td id="H4_Temp-min"></td>
                    <td id="H4_Temp-max"></td>
                    <td id="H4_Temp-Range"></td>
                    <td id="H4_Temp-Average"></td>
                    <td id="H4_Temp-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">H3 Temp(°C)</th>
                    <td id="H3_Temp-min"></td>
                    <td id="H3_Temp-max"></td>
                    <td id="H3_Temp-Range"></td>
                    <td id="H3_Temp-Average"></td>
                    <td id="H3_Temp-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">H2 Temp(°C)</th>
                    <td id="H2_Temp-min"></td>
                    <td id="H2_Temp-max"></td>
                    <td id="H2_Temp-Range"></td>
                    <td id="H2_Temp-Average"></td>
                    <td id="H2_Temp-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">H1 Temp(°C)</th>
                    <td id="H1_Temp-min"></td>
                    <td id="H1_Temp-max"></td>
                    <td id="H1_Temp-Range"></td>
                    <td id="H1_Temp-Average"></td>
                    <td id="H1_Temp-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Throat Temp(°C)</th>
                    <td id="Throat_Temp-min"></td>
                    <td id="Throat_Temp-max"></td>
                    <td id="Throat_Temp-Range"></td>
                    <td id="Throat_Temp-Average"></td>
                    <td id="Throat_Temp-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Hyd. Temp(°C)</th>
                    <td id="Hyd_Temp-min"></td>
                    <td id="Hyd_Temp-max"></td>
                    <td id="Hyd_Temp-Range"></td>
                    <td id="Hyd_Temp-Average"></td>
                    <td id="Hyd_Temp-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Mold Temp(Mov)(°C)</th>
                    <td id="Mold_Temp_Mov-min"></td>
                    <td id="Mold_Temp_Mov-max"></td>
                    <td id="Mold_Temp_Mov-Range"></td>
                    <td id="Mold_Temp_Mov-Average"></td>
                    <td id="Mold_Temp_Mov-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Mold Temp(Fix)(°C)</th>
                    <td id="Mold_Temp_Fix-min"></td>
                    <td id="Mold_Temp_Fix-max"></td>
                    <td id="Mold_Temp_Fix-Range"></td>
                    <td id="Mold_Temp_Fix-Average"></td>
                    <td id="Mold_Temp_Fix-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">Panel Temp(°C)</th>
                    <td id="Panel_Temp-min"></td>
                    <td id="Panel_Temp-max"></td>
                    <td id="Panel_Temp-Range"></td>
                    <td id="Panel_Temp-Average"></td>
                    <td id="Panel_Temp-SD"></td>
                  </tr>
                  <tr>
                    <th scope="row">HV Temp(OP)(°C)</th>
                    <td id="HV_Temp-min"></td>
                    <td id="HV_Temp-max"></td>
                    <td id="HV_Temp-Range"></td>
                    <td id="HV_Temp-Average"></td>
                    <td id="HV_Temp-SD"></td>
                  </tr>
                </tbody>
              </table>
            </div>

          </div>

          <!-- END MAIN -->

      </main>


      <script>

        let current_date = new Date().toLocaleString('fr-CA').slice(0,11);
        let current_time = new Date().toLocaleString('th-TH').slice(11,19);
        let current_time_back_1hour = new Date(Date.now() - 3600000 * 5).toLocaleString('th-TH').slice(11,19);
        
        $('input[name="fromdate"]').val(current_date + current_time_back_1hour);
        $('input[name="todate"]').val(current_date + current_time);

        let all_row_reid = ["Cycle_Time",
        "Inj_Time",
        "Recovery_Time",
        "Inj_start_Pos",
        "H_P_Trans_Pos",
        "Hold_Comp_Pos",
        "Cushion",
        "Inj_Press",
        "H_P_Trans_Prs",
        "Back_Press",
        "Cav_Press_OP",
        "LNH_Temp",
        "NH_Temp",
        "H4_Temp",
        "H3_Temp",
        "H2_Temp",
        "H1_Temp",
        "Throat_Temp",
        "Hyd_Temp",
        "Mold_Temp_Mov",
        "Mold_Temp_Fix",
        "Panel_Temp",
        "HV_Temp",
        ];

        let all_data = {
          "Cycle_Time" : [],
          "Inj_Time" : [],
          "Recovery_Time" : [],
          "Inj_start_Pos" : [],
          "H_P_Trans_Pos" : [],
          "Hold_Comp_Pos" : [],
          "Cushion" : [],
          "Inj_Press" : [],
          "H_P_Trans_Prs" : [],
          "Back_Press" : [],
          "Cav_Press_OP" : [],
          "LNH_Temp" : [],
          "NH_Temp" : [],
          "H4_Temp" : [],
          "H3_Temp" : [],
          "H2_Temp" : [],
          "H1_Temp" : [],
          "Throat_Temp" : [],
          "Hyd_Temp" : [],
          "Mold_Temp_Mov" : [],
          "Mold_Temp_Fix" : [],
          "Panel_Temp" : [],
          "HV_Temp" : []
        };

        const analyze = (type,array) => {
          if (type == "max") return Math.max(...array);
          if (type == "min") return Math.min(...array);
          if (type == "range") return (Math.max(...array) - Math.min(...array)).toFixed(2);
          if (type == "avg") return (array.reduce((a, b) => a + b, 0) / array.length).toFixed(2);
          if (type == "SD") {
            const n = array.length
            const mean = array.reduce((a, b) => a + b) / n
          return (Math.sqrt(array.map(x => Math.pow(x - mean, 2)).reduce((a, b) => a + b) / n)).toFixed(6)
          }
        }

        $(document).ready(() => {
          e.preventDefault();
          $.ajax({
            url: "https://node-red.ap.ngrok.io/inj/7/analyze",
            type: "GET",
            data: {
              'from': $('input[name="fromdate"]').val(),
              'to': $('input[name="todate"]').val(),
            },
            success: (data) => {
              data.forEach((element,i) => {
                all_data["Cycle_Time"].push(element["Cycle Time(s)"]);
                all_data["Inj_Time"].push(element["Inj. Time(s)"]);
                all_data["Recovery_Time"].push(element["Recovery Time(s)"]);
                all_data["Inj_start_Pos"].push(element["Inj.start Pos(mm)"]);
                all_data["H_P_Trans_Pos"].push(element["H.P Trans Pos(mm)"]);
                all_data["Hold_Comp_Pos"].push(element["Hold Comp Pos(mm)"]);
                all_data["Cushion"].push(element["Cushion(mm)"]);
                all_data["Inj_Press"].push(element["Inj. Press(Mpa)"]);
                all_data["H_P_Trans_Prs"].push(element["H.P Trans Prs(Mpa)"]);
                all_data["Back_Press"].push(element["Back Press(Mpa)"]);
                all_data["Cav_Press_OP"].push(element["Cav. Press(OP)(Mpa)"]);
                all_data["LNH_Temp"].push(element["LNH Temp(°C)"]);
                all_data["NH_Temp"].push(element["NH Temp(°C)"]);
                all_data["H4_Temp"].push(element["H4 Temp(°C)"]);
                all_data["H3_Temp"].push(element["H3 Temp(°C)"]);
                all_data["H2_Temp"].push(element["H2 Temp(°C)"]);
                all_data["H1_Temp"].push(element["H1 Temp(°C)"]);
                all_data["Throat_Temp"].push(element["Throat Temp(°C)"]);
                all_data["Hyd_Temp"].push(element["Hyd. Temp(°C)"]);
                all_data["Mold_Temp_Mov"].push(element["Mold Temp(Mov)(°C)"]);
                all_data["Mold_Temp_Fix"].push(element["Mold Temp(Fix)(°C)"]);
                all_data["Panel_Temp"].push(element["Panel Temp(°C)"]);
                all_data["HV_Temp"].push(element["HV Temp(OP)(°C)"]);
              });

              all_row_reid.forEach((element) => {
                $("#" + element + "-min").html(analyze("min",all_data[element]));
                $("#" + element + "-max").html(analyze("max",all_data[element]));
                $("#" + element + "-Range").html(analyze("range",all_data[element]));
                $("#" + element + "-Average").html(analyze("avg",all_data[element]));
                $("#" + element + "-SD").html(analyze("SD",all_data[element]));
              }); 

            },
            complete: function () {
                $('#spinner-div').hide();
            }
          });
        });

        $("#q-data").submit((e) => {
          e.preventDefault();
          $('#spinner-div').show();
          $.ajax({
            url: "https://node-red.ap.ngrok.io/inj/7/analyze",
            type: "GET",
            data: {
              'from': $('input[name="fromdate"]').val(),
              'to': $('input[name="todate"]').val(),
            },
            success: (data) => {
              data.forEach((element,i) => {
                all_data["Cycle_Time"].push(element["Cycle Time(s)"]);
                all_data["Inj_Time"].push(element["Inj. Time(s)"]);
                all_data["Recovery_Time"].push(element["Recovery Time(s)"]);
                all_data["Inj_start_Pos"].push(element["Inj.start Pos(mm)"]);
                all_data["H_P_Trans_Pos"].push(element["H.P Trans Pos(mm)"]);
                all_data["Hold_Comp_Pos"].push(element["Hold Comp Pos(mm)"]);
                all_data["Cushion"].push(element["Cushion(mm)"]);
                all_data["Inj_Press"].push(element["Inj. Press(Mpa)"]);
                all_data["H_P_Trans_Prs"].push(element["H.P Trans Prs(Mpa)"]);
                all_data["Back_Press"].push(element["Back Press(Mpa)"]);
                all_data["Cav_Press_OP"].push(element["Cav. Press(OP)(Mpa)"]);
                all_data["LNH_Temp"].push(element["LNH Temp(°C)"]);
                all_data["NH_Temp"].push(element["NH Temp(°C)"]);
                all_data["H4_Temp"].push(element["H4 Temp(°C)"]);
                all_data["H3_Temp"].push(element["H3 Temp(°C)"]);
                all_data["H2_Temp"].push(element["H2 Temp(°C)"]);
                all_data["H1_Temp"].push(element["H1 Temp(°C)"]);
                all_data["Throat_Temp"].push(element["Throat Temp(°C)"]);
                all_data["Hyd_Temp"].push(element["Hyd. Temp(°C)"]);
                all_data["Mold_Temp_Mov"].push(element["Mold Temp(Mov)(°C)"]);
                all_data["Mold_Temp_Fix"].push(element["Mold Temp(Fix)(°C)"]);
                all_data["Panel_Temp"].push(element["Panel Temp(°C)"]);
                all_data["HV_Temp"].push(element["HV Temp(OP)(°C)"]);
              });

              all_row_reid.forEach((element) => {
                $("#" + element + "-min").html(analyze("min",all_data[element]));
                $("#" + element + "-max").html(analyze("max",all_data[element]));
                $("#" + element + "-Range").html(analyze("range",all_data[element]));
                $("#" + element + "-Average").html(analyze("avg",all_data[element]));
                $("#" + element + "-SD").html(analyze("SD",all_data[element]));
              }); 

            },
            complete: function () {
                $('#spinner-div').hide();
            }
          });
        });

      </script>

      <%- include('../Injection_partials/Injection_script') -%>